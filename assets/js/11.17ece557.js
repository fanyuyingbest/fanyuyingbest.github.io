(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{102:function(t,n,a){"use strict";a.r(n);var e=a(0),_=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2-数据结构：时间复杂度👉空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据结构：时间复杂度👉空间复杂度"}},[t._v("#")]),t._v(" 2.数据结构：时间复杂度👉空间复杂度")]),t._v(" "),a("h3",{attrs:{id:"_2-1-时间昂贵，空间廉价"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-时间昂贵，空间廉价"}},[t._v("#")]),t._v(" 2-1 时间昂贵，空间廉价")]),t._v(" "),a("blockquote",[a("p",[t._v("如果缺少计算空间，可以花钱买服务器；但是缺少计算时间，只能投入宝贵时间去计算下去")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-数据结构连接时空"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-数据结构连接时空"}},[t._v("#")]),t._v(" 2-2 数据结构连接时空")]),t._v(" "),a("ul",[a("li",[t._v("常用的降低时间复杂度的方法有：递归、二分法、排序算法、动态规划等")]),t._v(" "),a("li",[t._v("降低空间复杂度核心思路就是，能用低复杂度的数据结构能解决问题，就千万不要用高复杂度的数据结构")]),t._v(" "),a("li",[t._v("1.第一步，暴力解法，在没有任何时间，空间约束下，完成代码任务的开发")]),t._v(" "),a("li",[t._v("2.第二步，无效操作处理，将代码中的无效计算、无效存储剔除，降低时间空间的复杂度")]),t._v(" "),a("li",[t._v("3.第三步，时空转换，设计合力数据结构，完成时间复杂度向空间复杂度转移")])]),t._v(" "),a("h3",{attrs:{id:"_2-3-降低复杂度的案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-降低复杂度的案例"}},[t._v("#")]),t._v(" 2-3 降低复杂度的案例")]),t._v(" "),a("h4",{attrs:{id:"_2-3-1-第一个例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-第一个例子"}},[t._v("#")]),t._v(" 2-3-1 第一个例子")]),t._v(" "),a("blockquote",[a("p",[t._v("例子：有任意多张面额为2、3、7元的货币，现在要他们凑100元，求总共多少中可能")])]),t._v(" "),a("ul",[a("li",[t._v("初级开发师做法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" function s2_1(){\n   let count = 0 ;\n   for(let i = 0; i < (100/7);i++){\n     for(let j = 0; j < (100 /3); j++){\n       for(let k = 0; k < (100 / 2); k++){\n         if(i*7 + j*3 + k*2 == 100){\n           count += 1\n         }\n       }\n     }\n   }\n   return count;\n }\n\n")])])]),a("blockquote",[a("p",[t._v("以上代码嵌套3层 for循环，所以时间复杂度为 O(n"),a("sup",[t._v("3")]),t._v(")\n但不难发现，当已经确定3元和7元的数量，2元是可以计算获得的，而不需要再循环，代码如下：")])]),t._v(" "),a("ul",[a("li",[t._v("优化后")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" function  s2_2(){\n   let count = 0;\n   for(let i = 0; i < (100/7); i++){\n     for(let j = 0; j < (100 / 3); j++ ){\n       if((100 - i*7 - j*3) % 2 == 0){\n         count += 1\n       }\n     }\n   }\n   return count;\n }\n")])])]),a("blockquote",[a("p",[t._v("删除无效循环后，时间复杂度由O(n"),a("sup",[t._v("3")]),t._v(")降为O(n"),a("sup",[t._v("2")]),t._v(")")])]),t._v(" "),a("h4",{attrs:{id:"_2-3-2-第二个例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-第二个例子"}},[t._v("#")]),t._v(" 2-3-2 第二个例子")]),t._v(" "),a("blockquote",[a("p",[t._v("例子：查找一个数组中，出现次数最多的那个元素的数值，如 a = [1,2,3,4,5,5,6],结果应该输出5")])]),t._v(" "),a("ul",[a("li",[t._v("初级做法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" function s2_3(){\n   let a = [1,2,3,4,5,5,6];\n   let val_max = -1;\n   let time_temp = 0;\n   let max_time = 0;\n   for(let i = 0; i < a.length; i++){\n     time_temp = 0;\n     for(let j = 0; j < a.length; j++){\n       if(a[i] === a[j]){\n         time_temp += 1;\n       };\n     }\n     if(time_temp > max_time){\n       max_time = time_temp;\n       val_max = a[i]\n     }\n   }\n   return val_max\n }\n")])])]),a("blockquote",[a("p",[t._v("以上代码嵌套2层 for循环，所以时间复杂度为 O(n"),a("sup",[t._v("2")]),t._v(")\n但是里面确实没有冗余代码，所以就从数据结构方面来优化，用数据字典的方式来处理，代码如下：")])]),t._v(" "),a("ul",[a("li",[t._v("优化后")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  function s2_4(){\n    let a = [1,2,3,4,5,5,6];\n    let obj2 = {};\n    //hasOwnProperty\n    for(let i = 0 ; i < a.length; i++){\n      if(obj2.hasOwnProperty(a[i])){\n        obj2[a[i]] += 1\n      }else{\n        obj2[a[i]] = 1;\n      }\n    }\n    console.log('obj2',obj2)\n    let val_max = -1;\n    let max_time = 0;\n    for(let key in obj2){\n      if(obj2[key] > max_time){\n        max_time = obj2[key];\n        val_max = [key]\n      }\n    }\n    return val_max\n  }\n\n")])])]),a("blockquote",[a("p",[t._v("以上代码可以看出，将嵌套for循环改为了顺序结构，时间复杂度由 O(n"),a("sup",[t._v("2")]),t._v(") 变为  O(n)")])]),t._v(" "),a("h3",{attrs:{id:"_2-4-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-总结"}},[t._v("#")]),t._v(" 2-4 总结")]),t._v(" "),a("ul",[a("li",[t._v("第一步，暴力解决；在没有任何时间、空间约束下，完成代码任务的开发")]),t._v(" "),a("li",[t._v("第二步，无效操作处理；将代码中的无效计算、无效存储剔除，降低时间或空间的复杂度")]),t._v(" "),a("li",[t._v("第三步，时空转换，设计合理的数据结构，完成时间复杂度向空间复杂度的转移")])]),t._v(" "),a("p",[a("b")])])}),[],!1,null,null,null);n.default=_.exports}}]);