(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{111:function(e,a,s){"use strict";s.r(a);var t=s(0),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"从-0-开始配置-webpach4-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从-0-开始配置-webpach4-0"}},[e._v("#")]),e._v(" 从 0 开始配置 webpach4.0")]),e._v(" "),s("h2",{attrs:{id:"webpack-的演化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的演化"}},[e._v("#")]),e._v(" webpack 的演化")]),e._v(" "),s("h3",{attrs:{id:"_1-commonjs-amd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-commonjs-amd"}},[e._v("#")]),e._v(" 1.CommonJS--\x3e AMD")]),e._v(" "),s("blockquote",[s("p",[e._v("CommonJS 在浏览器内并不适用，因为 require() 的返回是同步的，意味着有多个依赖的话需要一个一个依次下载，阻塞了 js 脚本执行\n所以在 CommonJS 的基础上定义了 AMD,使用异步回调语法并行下载多个依赖")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  require(['./b','./c'],function(b,c){\n    var n = b.square(2)\n    console.log(c)\n  })\n")])])]),s("blockquote",[s("p",[e._v("相应的导出语言可以这样写")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" define(['./d'],function(d){\n   return d.PI\n })\n")])])]),s("p",[e._v("define() 和 require() 的区别是，define()必须要在回调函数中返回一个值作为导出的内容；require()不需要导出内容，因此回调函数不需要返回值，也无法作为被依赖项被其他文件导入，因此用于入口文件，比如页面加载 a.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' <script src="js/require.js" data-main="js/a"><\/script>\n')])])]),s("h3",{attrs:{id:"_2-上手一个简单的-spa-应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-上手一个简单的-spa-应用"}},[e._v("#")]),e._v(" 2.上手一个简单的 SPA 应用")]),e._v(" "),s("h4",{attrs:{id:"_1-1-安装-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-安装-node"}},[e._v("#")]),e._v(" 1-1 安装 node")]),e._v(" "),s("h4",{attrs:{id:"_1-2-初始化一个项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-初始化一个项目"}},[e._v("#")]),e._v(" 1-2 初始化一个项目")]),e._v(" "),s("ul",[s("li",[e._v("1.创建一个文件夹，然后在文件夹内搭建项目，先看一下目录结构")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" |-- dist                 打包输出目录，只需要部署该文件夹到生产环境\n |-- package.json         项目配置信息\n |-- node_module          npm 安装的依赖包\n |-- src                  源代码\n |  |-- components        可复用的模块\n |  |-- index.html        入口 html\n |  |-- index.js          入口 js\n |  |-- shared            公共函数库\n |  |-- views             页面\n |-- webpack.config.js    webpack配置文件\n")])])]),s("ul",[s("li",[e._v("2.初始化项目 npm init")])]),e._v(" "),s("h4",{attrs:{id:"_1-3-给项目装上-eslint-代码检测工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-给项目装上-eslint-代码检测工具"}},[e._v("#")]),e._v(" 1-3.给项目装上 eslint 代码检测工具")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" npm install eslint eslint-config-enough babel-eslint eslint-loader --save-dev\n")])])]),s("p",[e._v("npm install 可以同时安装多个包，中间用空格隔开即可"),s("br")]),e._v(" "),s("p",[e._v("--save-dev 会将安装包和版本号记录到 package.json 中的 devDependencies 对象中"),s("br")]),e._v(" "),s("p",[e._v("--save 会记录到 dependencies 对象中"),s("br")]),e._v(" "),s("p",[e._v("我们在提交 git 代码时，会将 node_module 在.gitignore 文件中忽略，在提交到公共库中后，其他人可以直接根据 package.json 配置文件直接执行 npm install "),s("br")]),e._v(" "),s("p",[e._v("它会根据 devDependencies 和 dependencies 字段，把记录的包的相应版本下载下来"),s("br")]),e._v(" "),s("p",[e._v("这里的 eslint-config-enough 是配置文件，它规定了代码规范，如果需要它生效，需要在 package.json 文件中添加内容：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' {\n   "eslintConfig":{\n     "extends":"enough",\n     "env":{\n       "browser":true,\n       "node":true\n     }\n   }\n }\n\n')])])]),s("p",[e._v("banel-eslint 是 eslint-config-enough 依赖的语法解析库，替代 eslint 默认的解析库以支持还未标准化的语言"),s("br")]),e._v(" "),s("p",[e._v("eslint-loader 用于在 webpack 编译的时候检查代码，如果有错误，webpack 会报错"),s("br")]),e._v(" "),s("p",[e._v("项目里安装了 eslint 还没用，我们的 IDE 和编辑器也需要安装 eslint 插件支持"),s("br")]),e._v(" "),s("h4",{attrs:{id:"_1-4-写几个页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-写几个页面"}},[e._v("#")]),e._v(" 1-4 写几个页面")]),e._v(" "),s("ul",[s("li",[e._v("编辑 src/index.html 文件\n"),s("blockquote",[s("p",[e._v("写简单的结构，html body head 等标签\n不需要写 script 标签，webpack 会自动打包加入")])])])]),e._v(" "),s("h4",{attrs:{id:"_1-5-安装-webpack-和-babel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-安装-webpack-和-babel"}},[e._v("#")]),e._v(" 1-5 安装 webpack 和 babel")]),e._v(" "),s("ul",[s("li",[e._v("将 webpack 和它的插件安装到项目中")]),e._v(" "),s("li",[e._v("webpack 是 webpack 的核心库")]),e._v(" "),s("li",[e._v("webpack-cli 是 webpack 命令行")]),e._v(" "),s("li",[e._v("webpack-serve 是 webpack 用来开发调试的服务器，有了它就不用配置 nginx 了")]),e._v(" "),s("li",[e._v("html-webpack-plugin,html-loader,css-loader,style-loader 等是打包 html，css 文件")]),e._v(" "),s("li",[e._v("file-loader,url-loader 是打包二进制文件插件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" npm install webpack webpack-cli webpack-serve html-webpack-plugin html-loader css-loader style-loader file-loader url-loader --save-dev\n")])])]),s("p",[e._v("为了让不支持 ES6 的浏览器可以正常运行，需要安装 babel，它会将 ES6 源代码转化为 ES5")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" npm install babel-core babel-preset-env babel-loader --save-dev\n")])])]),s("ul",[s("li",[e._v("babel-core 是 babel 的核心编译器，babel-preset-env 是一个配置文件，可以转换 ES2017..到 ES5")]),e._v(" "),s("li",[e._v("babel-preset-env 打包不生效，需要在配置文件中加入 babel 配置：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' {\n   "babel":{\n     "presets":["env"]\n   }\n }\n')])])]),s("h4",{attrs:{id:"_1-6-配置-webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-配置-webpack"}},[e._v("#")]),e._v(" 1-6 配置 webpack")]),e._v(" "),s("blockquote",[s("p",[e._v("配置 webpack 需要创建 webpack.config.js 文件，由于该文件是在 node 中运行，所以不支持 ES6 语法")])]),e._v(" "),s("h4",{attrs:{id:"_1-7-运行项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-运行项目"}},[e._v("#")]),e._v(" 1-7 运行项目")]),e._v(" "),s("p",[e._v("配置完成，开始运行项目：")]),e._v(" "),s("ul",[s("li",[e._v("测试环境 webpack-serve")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" ./node_modules/.bin/webpack-serve webpack.config.js\n")])])]),s("blockquote",[s("p",[e._v("不同平台的配置命令不同，windows 自行搜索")])])])}),[],!1,null,null,null);a.default=n.exports}}]);